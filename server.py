# import required modules
from concurrent import futures
import grpc
import sys
sys.path.append("./service")
import service.inventory_model_pb2 as inventory_model_pb2
import service.inventory_model_pb2_grpc as inventory_model_pb2_grpc
import service.inventory_service_pb2 as inventory_service_pb2
import service.inventory_service_pb2_grpc as inventory_service_pb2_grpc

# setup in-memory database of books
db = {
    'abc101': {
        'isbn': 'abc101',
        'title': 'Shoe Dog',
        'author': 'Phil Knight',
        'genre': 'BIOGRAPHY',
        'year': 2016
    },
    'abc102': {
        'isbn': 'abc102',
        'title': 'Hit Refresh',
        'author': 'Greg Shaw',
        'genre': 'TECHNOLOGY',
        'year': 2017
    }
}

# class to provide implementation of InventoryServiceServicer which is autogenerated by protoc
class InventoryServiceServicer (inventory_service_pb2_grpc.InventoryServiceServicer):

    """Implmentation of RPC method CreateBook"""
    def CreateBook(self, request, context):
        """Fetch all fields from request, do validations and then add the new book to in-memory db"""

        isbn = request.isbn
        title = request.title
        author = request.author
        genre = request.genre
        year = request.year

        if isbn == "":
            return inventory_service_pb2.CreateBookResponse(reponseMessage="ISBN missing!", statusCode=grpc.StatusCode.INVALID_ARGUMENT.value[0])

        if (isbn in db.keys()):
            return inventory_service_pb2.CreateBookResponse(reponseMessage="Book already exists!", statusCode=grpc.StatusCode.ALREADY_EXISTS.value[0])
    
        if title=="" or author=="":
            return inventory_service_pb2.CreateBookResponse(reponseMessage="Title or Author missing!", statusCode=grpc.StatusCode.INVALID_ARGUMENT.value[0])
        
        """All validations are successfull, go ahead to create book and add it to db"""
        bookToAdd = inventory_model_pb2.Book(isbn = isbn, title=title, author=author, genre=genre, year=year)
        print(bookToAdd)
        db[isbn] = bookToAdd

        return inventory_service_pb2.CreateBookResponse(reponseMessage="Book successfully created!", statusCode=grpc.StatusCode.OK.value[0])

    """Implmentation of RPC method GetBook"""
    def GetBook(self, request, context):
        """Fetch isbn from request, do validations and then return the book with input isbn in request"""

        isbn = request.isbn
        print("isbn is " + isbn)

        if isbn == "":
            print("isbn is missing in request")
            return inventory_service_pb2.GetBookResponse(reponseMessage="ISBN missing!", statusCode=grpc.StatusCode.INVALID_ARGUMENT.value[0])

        if (isbn not in db.keys()):
            print("isbn not in db")
            return inventory_service_pb2.GetBookResponse(reponseMessage="Book not found!",statusCode=grpc.StatusCode.NOT_FOUND.value[0])

        print("isbn available in db ")
        """Fetch the book once validations are completed"""
        requestedBook = db[isbn]

        # print(requestedBook["genre"])

        return inventory_service_pb2.GetBookResponse(reponseMessage="Book found!", statusCode=grpc.StatusCode.OK.value[0], book=requestedBook)

def serve():
    # define port for grpc server to listen with 10 threads
    port = '50051'
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))

    # register InventoryServiceServicer with server
    inventory_service_pb2_grpc.add_InventoryServiceServicer_to_server(InventoryServiceServicer(), server)
    server.add_insecure_port('[::]:' + port)

    # start the server and print on console
    server.start()
    print("Server started, listening on " + port)

    # wait for termination
    server.wait_for_termination()


if __name__ == "__main__":
    # call serve method as soon as program runs
    serve()